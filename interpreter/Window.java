package interpreter;
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import java.awt.Color;
import java.awt.Component;
import java.awt.Toolkit;
import java.awt.event.MouseEvent;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.JFileChooser;
import javax.swing.JTable;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.BadLocationException;

import errors.RuntimeError;

/**
 *
 * @author sewenthy
 */
@SuppressWarnings("serial")
public class Window extends javax.swing.JFrame {

	/**
	 * Creates new form UserInterface
	 */
	public Window() {
		initComponents();
		saveFileDialog.setVisible(false);
		infoDialog.setVisible(false);
		addVariableDialog.setVisible(false);
	}

	private String currentFile = null;
	private HashMap<String, String> fileDircMap = new HashMap<String, String>();
	private java.awt.Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
	private ArrayList<Token> variables = null;
	private HashMap<String, Boolean> varSelected = null;
	private ArrayList<Token> currentDebugTableVariables = new ArrayList<Token>();
	private ArrayList<Integer> breakpoints = new ArrayList<Integer>();

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */

	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	@SuppressWarnings({ "serial", "resource" })
	private void initComponents() {
		java.awt.GridBagConstraints gridBagConstraints;

		saveFileDialog = new javax.swing.JDialog();
		saveToLabel = new javax.swing.JLabel();
		fileNameLabel = new javax.swing.JLabel();
		saveTo = new javax.swing.JTextField();
		fileName = new javax.swing.JTextField();
		cancel = new javax.swing.JButton();
		save = new javax.swing.JButton();
		browse = new javax.swing.JButton();

		fileChooser = new javax.swing.JFileChooser();

		infoDialog = new javax.swing.JDialog();
		infoIcon = new javax.swing.JLabel();
		infoLabel = new javax.swing.JLabel();
		okInfo = new javax.swing.JButton();

		logo = new javax.swing.JPanel();
		navbar = new javax.swing.JPanel();
		open = new javax.swing.JLabel();
		newFile = new javax.swing.JLabel();
		deleteFile = new javax.swing.JLabel();
		saveFile = new javax.swing.JLabel();
		fill1 = new javax.swing.Box.Filler(new java.awt.Dimension(70, 0), new java.awt.Dimension(70, 0),
				new java.awt.Dimension(32767, 0));
		run = new javax.swing.JLabel();
		stop = new javax.swing.JLabel();
		debug = new javax.swing.JLabel();
		breakpoint = new javax.swing.JLabel();
		fill2 = new javax.swing.Box.Filler(new java.awt.Dimension(260, 0), new java.awt.Dimension(260, 0),
				new java.awt.Dimension(32767, 0));
		lastBreak = new javax.swing.JLabel();
		nextBreak = new javax.swing.JLabel();
		prevLine = new javax.swing.JLabel();
		nextLine = new javax.swing.JLabel();
		packageExplorer = new javax.swing.JScrollPane();
		packageExplorerTable = new javax.swing.JTable();
		lineNum = new javax.swing.JPanel();
		numLabel = new javax.swing.JLabel();
		inputWindow = new javax.swing.JPanel();
		input = new javax.swing.JScrollPane();
		inputField = new javax.swing.JTextArea();
		debugScrollPane = new javax.swing.JScrollPane();
		debugTable = new javax.swing.JTable();
		console = new javax.swing.JPanel();
		consoleScrollPane = new javax.swing.JScrollPane();
		consoleOutput = new javax.swing.JTextArea();
		addVariableDialog = new javax.swing.JDialog();
		okAddVar = new javax.swing.JButton();
		cancelAddVar = new javax.swing.JButton();

		addVariableDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

		okAddVar.setText("OK");

		okAddVar.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				okAddVarMouseClicked(evt, false);
			}
		});

		cancelAddVar.setText("Cancel");
		cancelAddVar.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				cancelAddVarMouseClicked(evt);
			}
		});

		infoDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

		infoIcon.setText("display");
		infoIcon.setMaximumSize(new java.awt.Dimension(50, 50));
		infoIcon.setMinimumSize(new java.awt.Dimension(50, 50));
		infoIcon.setPreferredSize(new java.awt.Dimension(50, 50));
		infoDialog.getContentPane().add(infoIcon, new java.awt.GridBagConstraints());

		infoLabel.setText("display2");
		infoLabel.setMaximumSize(new java.awt.Dimension(999, 999));
		infoLabel.setMinimumSize(new java.awt.Dimension(250, 100));
		infoLabel.setPreferredSize(new java.awt.Dimension(250, 100));
		infoDialog.getContentPane().add(infoLabel, new java.awt.GridBagConstraints());

		okInfo.setText("OK");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 2;
		gridBagConstraints.gridy = 1;
		okInfo.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				okInfoMouseClicked(evt);
			}
		});
		infoDialog.getContentPane().add(okInfo, gridBagConstraints);

		saveFileDialog.setMinimumSize(new java.awt.Dimension(500, 300));
		saveFileDialog.setPreferredSize(new java.awt.Dimension(500, 300));
		saveFileDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

		saveToLabel.setText("Save to:");
		saveFileDialog.getContentPane().add(saveToLabel, new java.awt.GridBagConstraints());

		fileNameLabel.setText("File Name:");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		saveFileDialog.getContentPane().add(fileNameLabel, gridBagConstraints);

		saveTo.setMinimumSize(new java.awt.Dimension(300, 26));
		saveTo.setPreferredSize(new java.awt.Dimension(300, 26));
		saveFileDialog.getContentPane().add(saveTo, new java.awt.GridBagConstraints());

		fileName.setMinimumSize(new java.awt.Dimension(300, 26));
		fileName.setPreferredSize(new java.awt.Dimension(300, 26));
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 1;
		saveFileDialog.getContentPane().add(fileName, gridBagConstraints);

		cancel.setText("Cancel");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 2;
		cancel.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				cancelMouseClicked(evt);
			}
		});
		saveFileDialog.getContentPane().add(cancel, gridBagConstraints);

		save.setText("Save");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 2;
		gridBagConstraints.gridy = 2;
		save.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				try {
					saveMouseClicked(evt);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
		saveFileDialog.getContentPane().add(save, gridBagConstraints);

		browse.setText("Browse");
		browse.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				browseMouseClicked(evt);
			}
		});
		saveFileDialog.getContentPane().add(browse, new java.awt.GridBagConstraints());

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		getContentPane().setLayout(new java.awt.GridBagLayout());

		logo.setMinimumSize(new java.awt.Dimension(0, 0));
		logo.setPreferredSize(new java.awt.Dimension(0, 0));
		logo.setLayout(new java.awt.GridBagLayout());

		// logoLabel.setIcon(new
		// javax.swing.ImageIcon("/Users/sewenthy/Desktop/PseudoC/media/open.png"));
		// gridBagConstraints = new java.awt.GridBagConstraints();
		// gridBagConstraints.gridx = 0;
		// gridBagConstraints.gridy = 0;
		// gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
		// gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 0);
		// logo.add(logoLabel, gridBagConstraints);

		getContentPane().add(logo, new java.awt.GridBagConstraints());

		navbar.setBackground(new java.awt.Color(115, 253, 234));
		navbar.setMinimumSize(new java.awt.Dimension(860, 40));
		navbar.setPreferredSize(new java.awt.Dimension(860, 40));
		navbar.setLayout(new java.awt.GridBagLayout());

		open.setIcon(new javax.swing.ImageIcon("media/open.png")); // NOI18N
		open.setMaximumSize(new java.awt.Dimension(50, 40));
		open.setMinimumSize(new java.awt.Dimension(45, 40));
		open.setPreferredSize(new java.awt.Dimension(45, 40));
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;

		open.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				openMouseClicked(evt);
			}
		});
		navbar.add(open, gridBagConstraints);

		newFile.setIcon(new javax.swing.ImageIcon("media/new.png")); // NOI18N
		newFile.setMaximumSize(new java.awt.Dimension(45, 40));
		newFile.setMinimumSize(new java.awt.Dimension(45, 40));
		newFile.setPreferredSize(new java.awt.Dimension(45, 40));
		newFile.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				newFileMouseClicked(evt);
			}
		});
		navbar.add(newFile, new java.awt.GridBagConstraints());

		deleteFile.setIcon(new javax.swing.ImageIcon("media/delete.png")); // NOI18N
		deleteFile.setMaximumSize(new java.awt.Dimension(45, 40));
		deleteFile.setMinimumSize(new java.awt.Dimension(45, 40));
		deleteFile.setPreferredSize(new java.awt.Dimension(45, 40));
		deleteFile.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				deleteFileMouseClicked(evt);
			}
		});
		navbar.add(deleteFile, new java.awt.GridBagConstraints());

		saveFile.setIcon(new javax.swing.ImageIcon("media/save.png")); // NOI18N
		saveFile.setToolTipText("");
		saveFile.setMaximumSize(new java.awt.Dimension(45, 40));
		saveFile.setMinimumSize(new java.awt.Dimension(45, 40));
		saveFile.setPreferredSize(new java.awt.Dimension(45, 40));
		saveFile.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				saveFileMouseClicked(evt);
			}
		});

		navbar.add(saveFile, new java.awt.GridBagConstraints());
		navbar.add(fill1, new java.awt.GridBagConstraints());

		run.setIcon(new javax.swing.ImageIcon("media/run.png")); // NOI18N
		run.setMaximumSize(new java.awt.Dimension(45, 40));
		run.setMinimumSize(new java.awt.Dimension(45, 40));
		navbar.add(run, new java.awt.GridBagConstraints());
		run.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				runMouseClicked(evt);
			}
		});

		stop.setIcon(new javax.swing.ImageIcon("media/stop.png")); // NOI18N
		stop.setMaximumSize(new java.awt.Dimension(45, 40));
		stop.setMinimumSize(new java.awt.Dimension(45, 40));
		stop.setPreferredSize(new java.awt.Dimension(45, 40));
		stop.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				stopMouseClicked(evt);
			}
		});
		navbar.add(stop, new java.awt.GridBagConstraints());

		debug.setIcon(new javax.swing.ImageIcon("media/debug.png")); // NOI18N
		debug.setMaximumSize(new java.awt.Dimension(45, 40));
		debug.setMinimumSize(new java.awt.Dimension(45, 40));
		debug.setPreferredSize(new java.awt.Dimension(45, 40));
		debug.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				debugMouseClicked(evt);
			}
		});
		navbar.add(debug, new java.awt.GridBagConstraints());

		breakpoint.setIcon(new javax.swing.ImageIcon("media/breakpoint.png")); // NOI18N
		breakpoint.setToolTipText("");
		breakpoint.setMaximumSize(new java.awt.Dimension(45, 40));
		breakpoint.setMinimumSize(new java.awt.Dimension(45, 40));
		breakpoint.setPreferredSize(new java.awt.Dimension(45, 40));
		breakpoint.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				breakpointMouseClicked(evt);
			}
		});
		navbar.add(breakpoint, new java.awt.GridBagConstraints());
		navbar.add(fill2, new java.awt.GridBagConstraints());

		// lastBreak.setIcon(new javax.swing.ImageIcon("media/prev.png")); // NOI18N
		lastBreak.setMaximumSize(new java.awt.Dimension(45, 40));
		lastBreak.setMinimumSize(new java.awt.Dimension(45, 40));
		lastBreak.setPreferredSize(new java.awt.Dimension(45, 40));
		navbar.add(lastBreak, new java.awt.GridBagConstraints());

		// prevLine.setIcon(new javax.swing.ImageIcon("media/key-up.png")); // NOI18N
		prevLine.setMaximumSize(new java.awt.Dimension(45, 40));
		prevLine.setMinimumSize(new java.awt.Dimension(45, 40));
		prevLine.setPreferredSize(new java.awt.Dimension(45, 40));
		navbar.add(prevLine, new java.awt.GridBagConstraints());

		nextBreak.setIcon(new javax.swing.ImageIcon("media/next.png")); // NOI18N
		nextBreak.setMaximumSize(new java.awt.Dimension(45, 40));
		nextBreak.setMinimumSize(new java.awt.Dimension(45, 40));
		nextBreak.setPreferredSize(new java.awt.Dimension(45, 40));
		nextBreak.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				nextBreakMouseClicked(evt);
			}
		});
		navbar.add(nextBreak, new java.awt.GridBagConstraints());

		nextLine.setIcon(new javax.swing.ImageIcon("media/key-down.png")); // NOI18N
		nextLine.setMaximumSize(new java.awt.Dimension(45, 40));
		nextLine.setMinimumSize(new java.awt.Dimension(45, 40));
		nextLine.setPreferredSize(new java.awt.Dimension(45, 40));
		nextLine.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				nextLineMouseClicked(evt);
			}
		});
		navbar.add(nextLine, new java.awt.GridBagConstraints());

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridwidth = 4;
		getContentPane().add(navbar, gridBagConstraints);

		lineNum.setBackground(new java.awt.Color(94, 94, 94));
		lineNum.setMinimumSize(new java.awt.Dimension(20, 500));
		lineNum.setPreferredSize(new java.awt.Dimension(20, 500));
		lineNum.setLayout(new java.awt.GridBagLayout());
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.ipady = 10;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_END;
		lineNum.add(numLabel, gridBagConstraints);

		numLabel.setBackground(new java.awt.Color(94, 94, 94));
		numLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
		numLabel.setText("<html><p style='text-align: right;position: relative;top:10px;'>1</p>");
		numLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);
		numLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		numLabel.setMaximumSize(new java.awt.Dimension(20, 1000));
		numLabel.setMinimumSize(new java.awt.Dimension(20, 500));
		numLabel.setPreferredSize(new java.awt.Dimension(20, 500));
		numLabel.setSize(new java.awt.Dimension(20, 500));
		numLabel.setFont(new java.awt.Font("Inconsolata", 0, 18));
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		lineNum.add(numLabel, gridBagConstraints);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 2;
		gridBagConstraints.gridy = 1;
		getContentPane().add(lineNum, gridBagConstraints);

		inputWindow.setBackground(new java.awt.Color(1, 123, 118));
		inputWindow.setMinimumSize(new java.awt.Dimension(500, 500));
		inputWindow.setPreferredSize(new java.awt.Dimension(500, 500));
		inputWindow.setLayout(new java.awt.GridBagLayout());

		input.setBackground(new java.awt.Color(1, 123, 118));
		input.setMinimumSize(new java.awt.Dimension(500, 500));
		input.setPreferredSize(new java.awt.Dimension(500, 500));

		inputField.setBackground(new java.awt.Color(1, 123, 118));
		inputField.setColumns(20);
		inputField.setRows(1);
		inputField.setForeground(Color.WHITE);
		inputField.setSelectedTextColor(Color.GREEN);
		inputField.setFont(new java.awt.Font("Inconsolata", 0, 18));

		inputField.addKeyListener(new java.awt.event.KeyAdapter() {
			public void keyPressed(java.awt.event.KeyEvent evt) {
				try {
					inputFieldKeyPressed(evt);
				} catch (BadLocationException e) {
					e.printStackTrace();
				}
			}
		});
		input.setViewportView(inputField);

		inputWindow.add(input, new java.awt.GridBagConstraints());

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 3;
		gridBagConstraints.gridy = 1;
		getContentPane().add(inputWindow, gridBagConstraints);

		console.setMinimumSize(new java.awt.Dimension(720, 100));
		console.setPreferredSize(new java.awt.Dimension(720, 100));
		console.setSize(new java.awt.Dimension(720, 100));
		console.setLayout(new java.awt.GridBagLayout());

		consoleScrollPane.setMinimumSize(new java.awt.Dimension(720, 100));
		consoleScrollPane.setPreferredSize(new java.awt.Dimension(720, 100));
		consoleScrollPane.setSize(new java.awt.Dimension(720, 100));

		consoleOutput.setColumns(720);
		consoleOutput.setRows(9999999);
		consoleOutput.setMinimumSize(new java.awt.Dimension(720, 100));
		consoleOutput.setPreferredSize(new java.awt.Dimension(720, 100));
		consoleOutput.setSize(new java.awt.Dimension(720, 100));
		consoleScrollPane.setViewportView(consoleOutput);
		consoleOutput.setBackground(new Color(22, 231, 207));
		consoleOutput.setFont(new java.awt.Font("Inconsolata", 0, 18));

		console.add(consoleScrollPane, new java.awt.GridBagConstraints());

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 2;
		gridBagConstraints.gridy = 2;
		gridBagConstraints.gridwidth = 3;
		getContentPane().add(console, gridBagConstraints);

		packageExplorer.setMinimumSize(new java.awt.Dimension(140, 600));
		packageExplorer.setPreferredSize(new java.awt.Dimension(140, 600));

		// PackageExplorer Init
		packageExplorerTable.setBackground(new java.awt.Color(214, 213, 213));
		packageExplorerTable.setFont(new java.awt.Font("Inconsolata", 0, 10));
		packageExplorerTable.setRowHeight(30);
		// Setting the fist row to the title and image
		packageExplorerTable.setModel(new ColorTableModel(
				new Object[][] { { new javax.swing.ImageIcon("media/pckgexp.png"), "Package Explorer" } },
				new String[] { "", "" }) {

			@SuppressWarnings("rawtypes")
			Class[] types = new Class[] { javax.swing.Icon.class, java.lang.Object.class };
			boolean[] canEdit = new boolean[] { false, false };

			@SuppressWarnings({ "unchecked", "rawtypes" })
			public Class getColumnClass(int columnIndex) {
				return types[columnIndex];
			}

			public boolean isCellEditable(int rowIndex, int columnIndex) {
				return canEdit[columnIndex];
			}
		});

		((ColorTableModel) packageExplorerTable.getModel()).setRowColor(0, new Color(54, 124, 120));
		packageExplorerTable.setGridColor(new java.awt.Color(214, 213, 213));
		packageExplorerTable.setMinimumSize(new java.awt.Dimension(140, 600));
		packageExplorerTable.setPreferredSize(new java.awt.Dimension(140, 600));

		packageExplorerTable.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				packageExplorerTableMouseClicked(evt);
			}
		});
		packageExplorer.setViewportView(packageExplorerTable);
		if (packageExplorerTable.getColumnModel().getColumnCount() > 0) {
			packageExplorerTable.getColumnModel().getColumn(0).setResizable(false);
			packageExplorerTable.getColumnModel().getColumn(0).setPreferredWidth(30);
			packageExplorerTable.getColumnModel().getColumn(1).setResizable(false);
			packageExplorerTable.getColumnModel().getColumn(1).setPreferredWidth(110);
		}
		int i = 1;
		for (; i < 100; i++) {
			((ColorTableModel) packageExplorerTable.getModel()).setRowColor(i, new Color(214, 213, 213));
		}
		packageExplorerTable.setDefaultRenderer(Object.class, new ColorTableCellRenderer());
		try {
			BufferedReader br = new BufferedReader(new FileReader(".fileDirc.txt"));
			String dir = null;
			do {
				dir = br.readLine();
				if (dir != null) {
					ColorTableModel model = (ColorTableModel) packageExplorerTable.getModel();
					model.addRow(new Object[] { new javax.swing.ImageIcon("media/file.png"), dir.split(",")[0] });
					fileDircMap.put(dir.split(",")[0], dir.split(",")[1]);
				}
			} while (dir != null);
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.gridwidth = 2;
		gridBagConstraints.gridheight = 2;
		getContentPane().add(packageExplorer, gridBagConstraints);

		debugScrollPane.setMinimumSize(new java.awt.Dimension(200, 500));
		debugScrollPane.setPreferredSize(new java.awt.Dimension(200, 500));
		debugScrollPane.setSize(new java.awt.Dimension(200, 500));

		addVar = new javax.swing.ImageIcon("media/addVar.png"); // NOI18N

		rmVar = new javax.swing.ImageIcon("media/rmVar.png"); // NOI18N

		debugTable.setBackground(new java.awt.Color(0, 173, 159));
		debugTable.setPreferredSize(new java.awt.Dimension(200, 500));

		debugTable.setModel(new ColorTableModel(new Object[][] { { "", "Name", "Value", addVar }

		}, new Object[] { "", "", "", "" }) {
			/**
			 * 
			 */
			@SuppressWarnings("rawtypes")
			Class[] types = new Class[] { java.lang.Object.class, java.lang.String.class, java.lang.Object.class,
					javax.swing.Icon.class };
			boolean[] canEdit = new boolean[] { false, false, false, false };

			@SuppressWarnings({ "unchecked", "rawtypes" })
			public Class getColumnClass(int columnIndex) {
				return types[columnIndex];
			}

			public boolean isCellEditable(int rowIndex, int columnIndex) {
				return canEdit[columnIndex];
			}
		});
		debugTable.setDefaultRenderer(Object.class, new ColorTableCellRenderer());
		// debugTable.setDefaultRenderer(ImageIcon.class, new ColorTableCellRenderer());

		debugTable.setRowHeight(30);
		debugTable.setFont(new java.awt.Font("Inconsolata", 0, 10));
		((ColorTableModel) debugTable.getModel()).setRowColor(0, new Color(146, 146, 146));
		i = 1;
		for (; i < 100; i++) {
			((ColorTableModel) debugTable.getModel()).setRowColor(i, new java.awt.Color(0, 173, 159));
		}
		debugTable.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				debugTableMouseClicked(evt);
			}
		});
		debugScrollPane.setViewportView(debugTable);
		if (debugTable.getColumnModel().getColumnCount() > 0) {
			debugTable.getColumnModel().getColumn(0).setResizable(false);
			debugTable.getColumnModel().getColumn(0).setPreferredWidth(20);
			debugTable.getColumnModel().getColumn(1).setPreferredWidth(50);
			debugTable.getColumnModel().getColumn(2).setPreferredWidth(100);
			debugTable.getColumnModel().getColumn(3).setResizable(false);
			debugTable.getColumnModel().getColumn(3).setPreferredWidth(30);
		}

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 4;
		gridBagConstraints.gridy = 1;
		getContentPane().add(debugScrollPane, gridBagConstraints);

		pack();
	}// </editor-fold>

	private void packageExplorerTableMouseClicked(MouseEvent evt) {
		System.out.println(evt.toString());
		if (evt.getClickCount() == 2) {
			int row = packageExplorerTable.rowAtPoint(evt.getPoint());
			int col = packageExplorerTable.columnAtPoint(evt.getPoint());
			if (row < 1) {
				return;
			}
			System.out.println(packageExplorerTable.getValueAt(row, col));

			String fileToSearch = (String) packageExplorerTable.getValueAt(row, 1);
			currentFile = fileToSearch;
			printToInput(fileToSearch);
			int i = 1;
			for (; i < packageExplorerTable.getRowCount(); i++) {
				if (i == row)
					((ColorTableModel) packageExplorerTable.getModel()).setRowColor(row, new Color(86, 193, 255));
				else
					((ColorTableModel) packageExplorerTable.getModel()).setRowColor(i, new Color(214, 213, 213));
			}
			renumberLines();
			resetDebugTable();
		}
	}

	private void breakpointMouseClicked(java.awt.event.MouseEvent evt) {
		int caret = inputField.getCaretPosition();
		try {
			int caret_line = inputField.getLineOfOffset(caret);
			inputField.setSelectionStart(inputField.getLineStartOffset(caret_line));
			inputField.setSelectionEnd(inputField.getLineEndOffset(caret_line));
			breakpoints.add(caret_line);
		} catch (BadLocationException e) {

		}
	}

	int line_num = 1;

	private void inputFieldKeyPressed(java.awt.event.KeyEvent evt) throws BadLocationException {

		int cur_line = inputField.getLineCount();
		// This listener is to execute when Enter is hit(keycode of that event is 10)
		if (evt.getKeyCode() == 10) {
			/*
			 * Using HTML in the label here in order to let the text align next to the field
			 * i.e. make 12 align like | 12| instead of of |12 |.
			 */
			numLabel.setText("<html><p style='text-align: right;'>1</p>");
			int i = 1;
			cur_line++;
			while (cur_line-- > 1) {
				numLabel.setText(numLabel.getText() + "<p style='text-align: right;'>" + (++i) + "</p>");
			}
			line_num++;
			return;
		}

		// This listener is to execute when Command+A is hit(keycode of A is 65 and the
		// Command modifier keycode is 4)
		if (evt.getKeyCode() == 65 && evt.getModifiers() == 4) {
			inputField.select(0, inputField.getLineEndOffset(inputField.getLineCount() - 1));
		}

		// This is to relabel the line after paste command i.e. Command+V. This method
		// repaint the line numbers on the side
		if (evt.getKeyCode() == 86 && evt.getModifiers() == 4) {
			cur_line = inputField.getLineCount();
			line_num = cur_line--;

			numLabel.setText("<html><p style='text-align: right;'>1</p>");
			int i = 1;
			while (cur_line-- > 1) {
				numLabel.setText(numLabel.getText() + "<p style='text-align: right;'>" + (++i) + "</p>");
			}
		}

		// This is to relabel the line after a Backspace is hit(keycode is 8) and that
		// it isn't hit on the first line
		if (cur_line != 1 && evt.getKeyCode() == 8) {
			System.out.println("cur=" + cur_line);
			System.out.println("line=" + line_num);
			try {
				int caret = inputField.getCaretPosition();
				int caret_line = inputField.getLineOfOffset(caret);
				System.out.println("prev line offset: " + inputField.getLineEndOffset(caret_line - 1));
				System.out.println("this line offset: " + inputField.getLineEndOffset(caret_line));

				System.out.println("caret line: " + caret_line + " line count: " + inputField.getLineCount());

				if ((caret_line == inputField.getLineCount() - 1)
						? (inputField.getLineEndOffset(caret_line - 1) == inputField.getLineEndOffset(caret_line))
						: (inputField.getLineEndOffset(caret_line)
								- inputField.getLineEndOffset(caret_line - 1) == 1)) {
					// if(cur_line==line_num);
					// line_num=cur_line;
					// else
					line_num = cur_line--;

					numLabel.setText("<html><p style='text-align: right;'>1</p>");
					int i = 1;
					while (cur_line-- > 1) {
						numLabel.setText(numLabel.getText() + "<p style='text-align: right;'>" + (++i) + "</p>");
					}
				}
			} catch (BadLocationException ex) {
				Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
			}
			return;
		}
		System.out.println("line=" + line_num + " cur=" + inputField.getLineCount());
	}

	private void newFileMouseClicked(java.awt.event.MouseEvent evt) {
		saveFileDialog.setVisible(true);
		java.awt.Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
		saveFileDialog.setLocation(screenSize.width / 4, screenSize.height / 4);
	}

	private void cancelMouseClicked(java.awt.event.MouseEvent evt) {
		fileName.setText("");
		saveTo.setText("");
		saveFileDialog.setVisible(false);
	}

	private void saveMouseClicked(java.awt.event.MouseEvent evt) throws Exception {
		BufferedWriter bw = new BufferedWriter(new FileWriter(".fileDirc.txt", true));
		String finalName = saveTo.getText() + fileName.getText();
		String nameWOpsud = fileName.getText();
		if (finalName.endsWith(".psud")) {
			nameWOpsud = fileName.getText().substring(0, fileName.getText().length() - 5);
			bw.write(fileName.getText().substring(0, fileName.getText().length() - 5) + ",");
			bw.write(finalName);
			bw.newLine();
		} else {
			bw.write(fileName.getText() + ",");
			bw.write(finalName = finalName + ".psud");
			bw.newLine();
		}
		bw.flush();
		bw.close();
		fileDircMap.put(nameWOpsud, finalName);
		bw = new BufferedWriter(new FileWriter(finalName));
		DefaultTableModel model = (DefaultTableModel) packageExplorerTable.getModel();
		model.addRow(new Object[] { new javax.swing.ImageIcon("media/file.png"), fileName.getText() });
		packageExplorerTable.setRowSelectionInterval(packageExplorerTable.getRowCount() - 1,
				packageExplorerTable.getRowCount() - 1);
		// System.out.println(packageExplorerTable.getModel().getValueAt(packageExplorerTable.getSelectedRow(),
		// 1));
		int i = 1;
		for (; i < packageExplorerTable.getRowCount() - 1; i++) {
			((ColorTableModel) packageExplorerTable.getModel()).setRowColor(i, new Color(214, 213, 213));
		}
		((ColorTableModel) packageExplorerTable.getModel()).setRowColor(i, new Color(86, 193, 255));
		cancelMouseClicked(null);
		inputField.setText("");
		currentFile = nameWOpsud;
		renumberLines();
		resetDebugTable();
	}

	private void browseMouseClicked(java.awt.event.MouseEvent evt) {
		fileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
		fileChooser.showOpenDialog(browse);
		fileChooser.getCurrentDirectory();
		java.awt.Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
		fileChooser.setLocation(screenSize.width / 2, screenSize.height / 2);
		String dirc = fileChooser.getCurrentDirectory().getAbsolutePath();
		if (dirc.charAt(0) == '/')
			dirc += '/';
		else
			dirc += "\\";
		saveTo.setText(dirc);
	}

	private void deleteFileMouseClicked(java.awt.event.MouseEvent evt) {
		System.out.println("at delete: " + evt.toString());
		int row = packageExplorerTable.getSelectedRow();
		if (row < 1)
			return;
		String fileToDelete = (String) packageExplorerTable.getValueAt(row, 1);
		String dirc = fileDircMap.get(fileToDelete);
		new File(dirc).delete();
		fileDircMap.remove(fileToDelete);
		try {
			BufferedWriter bw = new BufferedWriter(new FileWriter(".fileDirc.txt"));
			Iterator<String> itName = fileDircMap.keySet().iterator();
			while (itName.hasNext()) {
				String n = itName.next();
				bw.write(n + "," + fileDircMap.get(n));
				bw.newLine();
				bw.flush();
			}
			bw.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		((ColorTableModel) packageExplorerTable.getModel()).removeRow(row);
		inputField.setText("");
		currentFile = null;
		renumberLines();

	}

	private void openMouseClicked(java.awt.event.MouseEvent evt) {
		fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
		FileFilter filter = new FileNameExtensionFilter("Document", "psud");
		fileChooser.setFileFilter(filter);
		fileChooser.showOpenDialog(open);
		java.awt.Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
		fileChooser.setLocation(screenSize.width / 4, screenSize.height / 4);

		File opened = fileChooser.getSelectedFile();
		if (opened == null)
			return;

		if (!opened.getName().endsWith(".psud"))
			return;

		BufferedWriter bw;
		String nameWOpsud = "";
		try {
			bw = new BufferedWriter(new FileWriter(".fileDirc.txt", true));

			nameWOpsud = opened.getName().substring(0, opened.getName().length() - 5);

			bw.write(nameWOpsud + ",");
			bw.write(opened.getAbsolutePath());
			bw.newLine();

			bw.flush();
			bw.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		DefaultTableModel model = (DefaultTableModel) packageExplorerTable.getModel();
		model.addRow(new Object[] { new javax.swing.ImageIcon("media/file.png"), nameWOpsud });
		packageExplorerTable.setRowSelectionInterval(packageExplorerTable.getRowCount() - 1,
				packageExplorerTable.getRowCount() - 1);
		fileDircMap.put(nameWOpsud, opened.getAbsolutePath());
		int i = 1;
		for (; i < packageExplorerTable.getRowCount() - 1; i++) {
			((ColorTableModel) packageExplorerTable.getModel()).setRowColor(i, new Color(214, 213, 213));
		}
		((ColorTableModel) packageExplorerTable.getModel()).setRowColor(i, new Color(86, 193, 255));
		printToInput(nameWOpsud);
		currentFile = nameWOpsud;
		renumberLines();
		resetDebugTable();
	}

	private void saveFileMouseClicked(java.awt.event.MouseEvent evt) {
		if (currentFile == null) {
			saveFileDialog.setVisible(true);
		}
		try {
			BufferedWriter bw = new BufferedWriter(new FileWriter(fileDircMap.get(currentFile)));
			bw.write(inputField.getText());
			bw.flush();
			bw.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private void runMouseClicked(java.awt.event.MouseEvent evt) {
		Interpreter.debug = false;
		Interpreter.run(inputField.getText());
	}

	String lineList = null;
	int pos = -1;
	int pos_breakpoint = 0;

	private void debugMouseClicked(java.awt.event.MouseEvent evt) {
		System.out.println("AT DEBUG CLICKED: " + currentDebugTableVariables);
		ColorTableModel model = (ColorTableModel) debugTable.getModel();
		for (int i = 0; i < currentDebugTableVariables.size(); i++) {
			model.removeRow(1);
		}
		System.out.println("AF RM: " + currentDebugTableVariables);

		okAddVarMouseClicked(null, true);

		System.out.println("AF OK: " + currentDebugTableVariables);

		Interpreter.debug = true;
		inputField.requestFocus();
		lineList = inputField.getText();
		pos = 0;
		inputField.setSelectionStart(0);
		try {
			inputField.setSelectionEnd(inputField.getLineEndOffset(0));
		} catch (BadLocationException e) {
		}
		Interpreter.runLine(lineList);

	}

	private void nextLineMouseClicked(java.awt.event.MouseEvent evt) {
		if (lineList == null) {
			infoLabel.setText("Error: Not in Debug Mode.");
			infoIcon.setIcon(null);
			infoIcon.setText("");
			infoDialog.setSize(new java.awt.Dimension(400, 200));
			infoDialog.setVisible(true);
			return;
		}

		try {
			try {
				inputField.setSelectionStart(inputField.getLineStartOffset(pos));
				inputField.setSelectionEnd(inputField.getLineEndOffset(pos));
			} catch (BadLocationException e) {
			}
			Interpreter.runLine(lineList, pos++);

		} catch (IllegalArgumentException e) {
			infoLabel.setText("Error: Every lines have been run.");
			infoIcon.setIcon(null);
			infoIcon.setText("");
			infoDialog.setSize(new java.awt.Dimension(400, 200));
			infoDialog.setVisible(true);
		}
	}

	private void nextBreakMouseClicked(java.awt.event.MouseEvent evt) {
		if (lineList == null) {
			infoLabel.setText("Error: Not in Debug Mode.");
			infoIcon.setIcon(null);
			infoIcon.setText("");
			infoDialog.setSize(new java.awt.Dimension(400, 200));
			infoDialog.setVisible(true);
			return;
		}
		if (pos_breakpoint == breakpoints.size() + 1) {
			infoLabel.setText("Error: Every lines have been run.");
			infoIcon.setIcon(null);
			infoIcon.setText("");
			infoDialog.setSize(new java.awt.Dimension(400, 200));
			infoDialog.setVisible(true);
			return;
		}
		System.out.println("breakpoints: " + breakpoints);
		if (pos_breakpoint == 0 && breakpoints.isEmpty()) {
			output("Error: No breakpoints created.");
			return;
		}
		if (pos_breakpoint == 0) {
			for (int i = 0; i <= breakpoints.get(pos_breakpoint); i++) {
				nextLineMouseClicked(null);
			}
			pos_breakpoint++;
			return;
		}
		System.out.println("breakpoitn pos: " + pos_breakpoint);
		if (pos_breakpoint == breakpoints.size()) {
			for (int i = breakpoints.get(pos_breakpoint - 1) + 1; i < inputField.getLineCount(); i++) {
				nextLineMouseClicked(null);
			}
			return;
		}
		for (int i = breakpoints.get(pos_breakpoint - 1) + 1; i <= breakpoints.get(pos_breakpoint); i++) {
			nextLineMouseClicked(null);
		}
		pos_breakpoint++;
	}

	private void stopMouseClicked(java.awt.event.MouseEvent evt) {
		Interpreter.reset();
	}

	private void debugTableMouseClicked(java.awt.event.MouseEvent evt) {
		int col = debugTable.columnAtPoint(evt.getPoint());
		int row = debugTable.rowAtPoint(evt.getPoint());
		if (col == -1 || row == -1)
			return;
		if (col == 3 && row == 0) {

			try {
				variables = Interpreter.getVariableList(inputField.getText());
				boolean allChecked = true;
				for (int i = 0; i < variables.size(); i++) {
					if (!TokenType.basicVarReferredTo(currentDebugTableVariables, variables.get(i))) {
						allChecked = false;
						break;
					}
				}
				if (allChecked) {
					infoLabel.setText("No variables more found.");
					infoDialog.setVisible(true);
					infoIcon.setText("");
					infoDialog.setPreferredSize(new java.awt.Dimension(400, 200));
					infoDialog.setMinimumSize(new java.awt.Dimension(400, 200));
					infoDialog.setLocation(screenSize.width / 4, screenSize.height / 4);
					return;
				}
				if (variables.isEmpty()) {
					infoLabel.setText("No variables found.");
					infoDialog.setVisible(true);
					infoIcon.setText("");
					infoDialog.setPreferredSize(new java.awt.Dimension(400, 200));
					infoDialog.setMinimumSize(new java.awt.Dimension(400, 200));
					infoDialog.setLocation(screenSize.width / 4, screenSize.height / 4);
					return;
				}
				System.out.println("this is running..." + variables.toString());
				java.awt.GridBagConstraints gridBagConstraints;
				varSelected = new HashMap<String, Boolean>();
				int i = 0;
				for (; i < variables.size(); i++) {
					javax.swing.JCheckBox var = new javax.swing.JCheckBox();
					if (TokenType.basicVarReferredTo(currentDebugTableVariables, variables.get(i)))
						continue;
					var.setText((String) (variables.get(i).value));
					var.addMouseListener(new java.awt.event.MouseAdapter() {
						public void mouseClicked(java.awt.event.MouseEvent evt) {
							varMouseClicked(evt);
						}
					});
					System.out.println((String) (variables.get(i).value));
					gridBagConstraints = new java.awt.GridBagConstraints();
					gridBagConstraints.gridx = 0;
					gridBagConstraints.gridy = i;
					gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
					addVariableDialog.getContentPane().add(var, gridBagConstraints);
				}
				gridBagConstraints = new java.awt.GridBagConstraints();
				gridBagConstraints.gridx = 1;
				gridBagConstraints.gridy = i;
				gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
				addVariableDialog.getContentPane().add(okAddVar, gridBagConstraints);

				gridBagConstraints = new java.awt.GridBagConstraints();
				gridBagConstraints.gridx = 0;
				gridBagConstraints.gridy = i;
				gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
				addVariableDialog.getContentPane().add(cancelAddVar, gridBagConstraints);

				addVariableDialog.setPreferredSize(new java.awt.Dimension(250, 40 * i + 50));
				addVariableDialog.setMinimumSize(new java.awt.Dimension(250, 40 * i + 50));

			} catch (errors.Exception e) {
				e.printStackTrace();
			}
			addVariableDialog.setLocation(screenSize.width / 4, screenSize.height / 4);
			addVariableDialog.setVisible(true);
		} else if (col == 3) {
			((ColorTableModel) debugTable.getModel()).removeRow(row);
			renumberDebugTable();
			currentDebugTableVariables.remove(row - 1);
			System.out.println(currentDebugTableVariables);
		}
	}

	private void varMouseClicked(java.awt.event.MouseEvent evt) {
		System.out.println(evt.toString());
		javax.swing.JCheckBox var = (javax.swing.JCheckBox) evt.getSource();
		varSelected.put(var.getText(), var.isSelected());
	}

	@SuppressWarnings("unchecked")
	private void okAddVarMouseClicked(java.awt.event.MouseEvent evt, boolean clean) {
		if (clean) {
			if (varSelected == null && currentDebugTableVariables.isEmpty())
				return;

			ColorTableModel model = (ColorTableModel) debugTable.getModel();

			for (int i = 0; i < currentDebugTableVariables.size(); i++) {
				Object var = currentDebugTableVariables.get(i).value;
				String varName = null;
				if (var.getClass() == String.class)
					varName = (String) var;
				else if (var.getClass() == HashMap.class) {
					varName = ((HashMap<String, Object>) var).keySet().iterator().next();
				}
				model.addRow(new Object[] { debugTable.getRowCount(), varName, null, rmVar });
			}

			return;
		}
		Iterator<String> itVar = varSelected.keySet().iterator();
		ColorTableModel model = (ColorTableModel) debugTable.getModel();

		while (itVar.hasNext()) {
			String varName = itVar.next();
			if (varSelected.get(varName)) {
				model.addRow(new Object[] { debugTable.getRowCount(), varName, null, rmVar });
				if (!clean)
					currentDebugTableVariables.add(new Token(TokenType.VARIABLE, varName));
			}
		}
		cancelAddVarMouseClicked(null);
		System.out.println("WHY THE FUCK IS THIS NOT PRINTING" + currentDebugTableVariables);
	}

	private void cancelAddVarMouseClicked(java.awt.event.MouseEvent evt) {
		addVariableDialog.setVisible(false);
		addVariableDialog = new javax.swing.JDialog();
		addVariableDialog.getContentPane().setLayout(new java.awt.GridBagLayout());
		variables = null;
	}

	private void okInfoMouseClicked(java.awt.event.MouseEvent evt) {
		infoIcon.setText("");
		infoIcon.setIcon(null);
		infoLabel.setText("");
		infoDialog.setVisible(false);
	}

	@SuppressWarnings("resource")
	private void printToInput(String name) {
		try {
			BufferedReader br = new BufferedReader(new FileReader(fileDircMap.get(name)));

			String lines = "";
			String line = null;
			while ((line = br.readLine()) != null)
				lines += line + "\n";
			if (lines.isEmpty()) {
				inputField.setText("");
				return;
			}
			inputField.setText(lines.substring(0, lines.length() - 1));
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	public void renumberLines() {
		int cur_line = inputField.getLineCount();
		// System.out.println("line=" + line_num + " cur=" + inputField.getLineCount());
		numLabel.setText("<html><p style='text-align: right;'>1</p>");
		int i = 1;
		cur_line++;
		while (--cur_line > 1) {
			numLabel.setText(numLabel.getText() + "<p style='text-align: right;'>" + (++i) + "</p>");
		}
		// System.out.println(inputField.getText().split("\n").length);

	}

	public void output(String output) {
		if (output.isEmpty())
			consoleOutput.setText("");
		else if (consoleOutput.getText().isEmpty())
			consoleOutput.setText(output + "\n");
		else
			consoleOutput.setText(consoleOutput.getText() + output + "\n");
	}

	private void renumberDebugTable() {
		int col = 0;
		int row = 1;
		while (row < debugTable.getRowCount()) {
			((ColorTableModel) debugTable.getModel()).setValueAt(row, row, col);
			row++;
		}

	}

	int lastVarChangedRow = -1;

	public void submitVarChanges(Token var, int row) {
		row++;
		ColorTableModel model = (ColorTableModel) debugTable.getModel();

		if (lastVarChangedRow > 0) {
			model.removeRowColor(lastVarChangedRow);
			model.setRowColor(lastVarChangedRow, new java.awt.Color(0, 173, 159));
		}
		model.removeRowColor(row);
		model.setRowColor(row, Color.BLUE);
		model.removeRow(row);
		HashMap<String, Object> value = (HashMap<String, Object>) var.value;
		String name = value.keySet().iterator().next();
		String val = null;
		try {
			val = ((Token) value.get(name)).output();
		} catch (RuntimeError e) {
			output("Error: no output value on variable: " + val);
		}
		model.insertRow(row, new Object[] { row, name, val, rmVar });
		lastVarChangedRow = row;
	}

	public ArrayList<Token> getCurrentWatchedVariables() {
		return currentDebugTableVariables;
	}

	private void resetDebugTable() {
		int row = debugTable.getRowCount() - 1;
		while (row >= 1) {
			((ColorTableModel) debugTable.getModel()).removeRow(row);
			row--;
		}
		renumberDebugTable();
		currentDebugTableVariables.clear();
	}

	public void output(String output, Color color) {
		consoleOutput.setText(output);
	}

	// Variables declaration - do not modify
	private javax.swing.JLabel breakpoint;
	private javax.swing.JPanel console;
	private javax.swing.JTextArea consoleOutput;
	private javax.swing.JLabel debug;
	private javax.swing.JScrollPane debugScrollPane;
	private javax.swing.JTable debugTable;
	private javax.swing.JLabel deleteFile;
	private javax.swing.Box.Filler fill1;
	private javax.swing.Box.Filler fill2;
	private javax.swing.JScrollPane input;
	private javax.swing.JTextArea inputField;
	private javax.swing.JPanel inputWindow;
	private javax.swing.JScrollPane consoleScrollPane;
	private javax.swing.JLabel lastBreak;
	private javax.swing.JPanel lineNum;
	private javax.swing.JPanel logo;
	private javax.swing.JPanel navbar;
	private javax.swing.JLabel newFile;
	private javax.swing.JLabel nextBreak;
	private javax.swing.JLabel nextLine;
	private javax.swing.JLabel numLabel;
	private javax.swing.JLabel open;
	private javax.swing.JScrollPane packageExplorer;
	private javax.swing.JTable packageExplorerTable;
	private javax.swing.JLabel prevLine;
	private javax.swing.JLabel run;
	private javax.swing.JLabel saveFile;
	private javax.swing.JLabel stop;
	private javax.swing.Icon addVar;
	private javax.swing.Icon rmVar;
	private javax.swing.JButton save;
	private javax.swing.JDialog saveFileDialog;
	private javax.swing.JTextField saveTo;
	private javax.swing.JLabel saveToLabel;
	private javax.swing.JLabel fileNameLabel;
	private javax.swing.JTextField fileName;
	private javax.swing.JButton cancel;
	private javax.swing.JButton browse;
	private javax.swing.JFileChooser fileChooser;
	private javax.swing.JDialog infoDialog;
	private javax.swing.JLabel infoIcon;
	private javax.swing.JLabel infoLabel;
	private javax.swing.JButton okInfo;
	private javax.swing.JDialog addVariableDialog;
	private javax.swing.JButton okAddVar;
	private javax.swing.JButton cancelAddVar;

	// End of variables declaration
	@SuppressWarnings("serial")
	public static class ColorTableModel extends javax.swing.table.DefaultTableModel {
		public ColorTableModel(Object[][] table, Object[] name) {
			super(table, name);
		}

		List<Color> rowColors = new ArrayList<Color>();

		public void setRowColor(int row, Color c) {
			rowColors.add(row, c);
			fireTableRowsUpdated(row, row);
		}

		public void removeRowColor(int row) {
			rowColors.remove(row);
			fireTableRowsUpdated(row, row);
		}

		public void addRowColor(int row, Color c) {
			rowColors.add(row, c);
		}

		public Color getRowColour(int row) {
			return rowColors.get(row);
		}

	}

	@SuppressWarnings("serial")
	static class ColorTableCellRenderer extends DefaultTableCellRenderer {

		@Override
		public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, 
				boolean hasFocus,int row, int column) {
			ColorTableModel model = (ColorTableModel) table.getModel();
			Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
			c.setBackground(model.getRowColour(row));
			return c;
		}
	}
}
